{"moduleFile":{"sourceFilePath":"/Users/donovan/github.com/donovanh/cat-gif-stencil/src/components/my-component/cat-gif.tsx","jsFilePath":"/Users/donovan/github.com/donovanh/cat-gif-stencil/src/components/my-component/cat-gif.js","cmps":[{"isLegacy":false,"tagName":"cat-gif","excludeFromCollection":false,"isCollectionDependency":false,"componentClassName":"CatGif","elementRef":null,"encapsulation":"shadow","shadowDelegatesFocus":false,"properties":[{"name":"keyword","type":"string","attribute":"keyword","reflect":false,"mutable":false,"required":false,"optional":false,"complexType":{"original":"string","resolved":"string","references":{}},"docs":{"tags":[],"text":"Optional keyword"},"internal":false}],"virtualProperties":[],"states":[{"name":"images"},{"name":"imageUrl"}],"methods":[],"listeners":[{"name":"click","method":"handleClick","capture":true,"passive":false}],"events":[],"watchers":[{"propName":"keyword","methodName":"watchHandler"}],"styles":[{"modeName":"$","styleId":"CAT-GIF","styleStr":null,"styleIdentifier":null,"compiledStyleText":null,"compiledStyleTextScoped":null,"compiledStyleTextScopedCommented":null,"externalStyles":[{"absolutePath":"/Users/donovan/github.com/donovanh/cat-gif-stencil/src/components/my-component/cat-gif.css","relativePath":"cat-gif.css","originalComponentPath":"cat-gif.css"}]}],"legacyConnect":[],"legacyContext":[],"internal":false,"assetsDirs":[],"styleDocs":[],"docs":{"tags":[],"text":""},"jsFilePath":"/Users/donovan/github.com/donovanh/cat-gif-stencil/src/components/my-component/cat-gif.js","sourceFilePath":"/Users/donovan/github.com/donovanh/cat-gif-stencil/src/components/my-component/cat-gif.tsx","hasAttributeChangedCallbackFn":false,"hasComponentWillLoadFn":false,"hasComponentDidLoadFn":false,"hasComponentShouldUpdateFn":false,"hasComponentWillUpdateFn":false,"hasComponentDidUpdateFn":false,"hasComponentWillRenderFn":false,"hasComponentDidRenderFn":false,"hasComponentDidUnloadFn":false,"hasConnectedCallbackFn":true,"hasDisconnectedCallbackFn":false,"hasElement":false,"hasEvent":false,"hasLifecycle":false,"hasListener":true,"hasListenerTarget":false,"hasListenerTargetWindow":false,"hasListenerTargetDocument":false,"hasListenerTargetBody":false,"hasListenerTargetParent":false,"hasMember":true,"hasMethod":false,"hasMode":false,"hasAttribute":true,"hasProp":true,"hasPropNumber":false,"hasPropBoolean":false,"hasPropString":true,"hasPropMutable":false,"hasReflect":false,"hasRenderFn":true,"hasState":true,"hasStyle":true,"hasVdomAttribute":true,"hasVdomXlink":false,"hasVdomClass":false,"hasVdomFunctional":false,"hasVdomKey":false,"hasVdomListener":false,"hasVdomRef":false,"hasVdomRender":true,"hasVdomStyle":false,"hasVdomText":false,"hasWatchCallback":true,"isPlain":false,"htmlAttrNames":["src","alt"],"htmlTagNames":["img"],"isUpdateable":true,"potentialCmpRefs":[]}],"coreRuntimeApis":[],"collectionName":null,"dtsFilePath":null,"excludeFromCollection":false,"externalImports":["@stencil/core"],"hasVdomAttribute":false,"hasVdomXlink":false,"hasVdomClass":false,"hasVdomFunctional":false,"hasVdomKey":false,"hasVdomListener":false,"hasVdomRef":false,"hasVdomRender":false,"hasVdomStyle":false,"hasVdomText":false,"htmlAttrNames":[],"htmlTagNames":[],"isCollectionDependency":false,"isLegacy":false,"localImports":[],"originalCollectionComponentPath":null,"originalImports":["@stencil/core"],"potentialCmpRefs":[]},"jsText":"import { h } from \"@stencil/core\";\r\nexport class CatGif {\r\n    constructor() {\r\n        /**\r\n         * Internal state\r\n         */\r\n        this.images = [];\r\n        this.imageUrl = '';\r\n    }\r\n    watchHandler(newValue, oldValue) {\r\n        if (oldValue === newValue) {\r\n            return;\r\n        }\r\n        this.images = [];\r\n        this.getRandomImageUrl();\r\n    }\r\n    async connectedCallback() {\r\n        this.imageUrl = await this.getRandomImageUrl();\r\n    }\r\n    async handleClick(ev) {\r\n        this.imageUrl = await this.getRandomImageUrl();\r\n    }\r\n    async fetchGifs() {\r\n        const key = 'gwWthNT5DFpvrh04kt4PYiakYO12aM3B';\r\n        let keywords = `cat`;\r\n        if (this.keyword) {\r\n            keywords += ` ${this.keyword}`;\r\n        }\r\n        const url = `${window.location.protocol}//api.giphy.com/v1/gifs/search?api_key=${key}&q=${encodeURI(keywords)}`;\r\n        const result = await fetch(url);\r\n        const JSONresult = await result.json();\r\n        this.images = JSONresult.data.map(item => item.images.original.url);\r\n    }\r\n    async getRandomImageUrl() {\r\n        if (!this.images.length) {\r\n            console.log('Got here');\r\n            await this.fetchGifs();\r\n        }\r\n        return this.images[Math.floor(Math.random() * this.images.length)];\r\n    }\r\n    render() {\r\n        return h(\"img\", { src: this.imageUrl, alt: `Cat${this.keyword ? ' ' + this.keyword : ''} gif` });\r\n    }\r\n    static get is() { return \"cat-gif\"; }\r\n    static get encapsulation() { return \"shadow\"; }\r\n    static get originalStyleUrls() { return {\r\n        \"$\": [\"cat-gif.css\"]\r\n    }; }\r\n    static get styleUrls() { return {\r\n        \"$\": [\"cat-gif.css\"]\r\n    }; }\r\n    static get properties() { return {\r\n        \"keyword\": {\r\n            \"type\": \"string\",\r\n            \"mutable\": false,\r\n            \"complexType\": {\r\n                \"original\": \"string\",\r\n                \"resolved\": \"string\",\r\n                \"references\": {}\r\n            },\r\n            \"required\": false,\r\n            \"optional\": false,\r\n            \"docs\": {\r\n                \"tags\": [],\r\n                \"text\": \"Optional keyword\"\r\n            },\r\n            \"attribute\": \"keyword\",\r\n            \"reflect\": false\r\n        }\r\n    }; }\r\n    static get states() { return {\r\n        \"images\": {},\r\n        \"imageUrl\": {}\r\n    }; }\r\n    static get watchers() { return [{\r\n            \"propName\": \"keyword\",\r\n            \"methodName\": \"watchHandler\"\r\n        }]; }\r\n    static get listeners() { return [{\r\n            \"name\": \"click\",\r\n            \"method\": \"handleClick\",\r\n            \"target\": undefined,\r\n            \"capture\": true,\r\n            \"passive\": false\r\n        }]; }\r\n}\r\n"}